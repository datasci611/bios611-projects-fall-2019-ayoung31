while(A != 6)
{
i = i+1
A <- sample(mydice, size = 1)
if(A == 6)
{
N_N = i
}
}
A <- 0
i <- 0
while(A != 6)
{
i = i+1
A <- sample(mydice, size = 1)
if(A == 6)
{
N_D = i
}
}
if(N_A < N_N && N_N < N_D)
{
counter <- counter + 1
}
}
sims <- 100000
mydice <- seq(1,6,1)
counter <- 0
for(j in 1:sims)
{
A <- 0
i <- 0
while(A != 6)
{
i = i+1
A <- sample(mydice, size = 1)
if(A == 6)
{
N_A = i
}
}
A <- 0
i <- 0
while(A != 6)
{
i = i+1
A <- sample(mydice, size = 1)
if(A == 6)
{
N_N = i
}
}
A <- 0
i <- 0
while(A != 6)
{
i = i+1
A <- sample(mydice, size = 1)
if(A == 6)
{
N_D = i
}
}
if(N_A < N_N && N_N < N_D)
{
counter <- counter + 1
}
}
counter/sims
set.seed(123)
hisp.prop=rep(c(.2,.2125,.2975,.2975),times=2)  # proportion of HHs within each stratum with Hispanic surname & in target population
other.prop=rep(c(.15,.225,.26,.2925),times=2)   # proportion of HHs within each stratum with other surname & in target population
Nbg.strat=rep(c(58,21,130,167),times=2)         # number of BGs within each stratum
Nbg=sum(Nbg.strat)
bg.size.temp=1+round(rexp(Nbg,1/450))    # at least 1 HH per BG, mean number of HHs/BG=451 -- this is number of ALL HHs in each BG (including non-eligible HHs)
c(bg.size.temp[1:Nbg.strat[1]]
sdfsd
bg.size.temp[1:Nbg.strat[1]]
Nbg=sum(Nbg.strat)
bg.size.temp=1+round(rexp(Nbg,1/450))    # at least 1 HH per BG, mean number of HHs/BG=451 -- this is number of ALL HHs in each BG (including non-eligible HHs)
num.hisp.strat=round(c(bg.size.temp[1:Nbg.strat[1]]*hisp.prop[1],bg.size.temp[(Nbg.strat[1]+1):sum(Nbg.strat[1:2])]*hisp.prop[2],bg.size.temp[(sum(Nbg.strat[1:2])+1):sum(Nbg.strat[1:3])]*hisp.prop[3],bg.size.temp[(sum(Nbg.strat[1:3])+1):sum(Nbg.strat[1:4])]*hisp.prop[4],
bg.size.temp[(sum(Nbg.strat[1:4])+1):sum(Nbg.strat[1:5])]*hisp.prop[5],bg.size.temp[(sum(Nbg.strat[1:5])+1):sum(Nbg.strat[1:6])]*hisp.prop[6],bg.size.temp[(sum(Nbg.strat[1:6])+1):sum(Nbg.strat[1:7])]*hisp.prop[7],bg.size.temp[(sum(Nbg.strat[1:7])+1):sum(Nbg.strat[1:8])]*hisp.prop[8])) # number of eligible HHs with Hispanic surname in each BG
num.other.strat=round(c(bg.size.temp[1:Nbg.strat[1]]*other.prop[1],bg.size.temp[(Nbg.strat[1]+1):sum(Nbg.strat[1:2])]*other.prop[2],bg.size.temp[(sum(Nbg.strat[1:2])+1):sum(Nbg.strat[1:3])]*other.prop[3],bg.size.temp[(sum(Nbg.strat[1:3])+1):sum(Nbg.strat[1:4])]*other.prop[4],
bg.size.temp[(sum(Nbg.strat[1:4])+1):sum(Nbg.strat[1:5])]*other.prop[5],bg.size.temp[(sum(Nbg.strat[1:5])+1):sum(Nbg.strat[1:6])]*other.prop[6],bg.size.temp[(sum(Nbg.strat[1:6])+1):sum(Nbg.strat[1:7])]*other.prop[7],bg.size.temp[(sum(Nbg.strat[1:7])+1):sum(Nbg.strat[1:8])]*other.prop[8])) # number of eligible HHs with other surname in each BG
bg.size=num.hisp.strat+num.other.strat  # number of eligible HHs in each BG
bg.size
num.other.strat
Nhh=sum(bg.size)                        # number of HHs in target population
Nhh
hh.size=1+rpois(Nhh,1)                  # at least 1 subject per HH, mean number of subjects/HH=2
N=sum(hh.size)                          # number of subjects in target population
A=matrix(rep(NA,times=max(bg.size)*length(bg.size)),nrow=max(bg.size),ncol=length(bg.size))
A
View(A)
for (i in 1:length(bg.size)){
A[,i]=c(rep(TRUE,times=num.hisp.strat[i]),rep(FALSE,times=num.other.strat[i]),rep(NA,times=max(bg.size)-bg.size[i]))    # create matrix A with each column corresponding to a BG (containing 1's for each Hispanic HH followed by 0's for each other HH)
}
max(bg.size)
length(bg.size)
matrix(data=NA, nrow=5, ncol=5)
c(A)
b <- c(A)
na.omit(c(A))
hisp.strat.hh=na.omit(c(A))   #indicator for Hispanic surname (one entry per HH)
BGid=rep(rep(rep(1:Nbg, times=bg.size), times=hh.size), times=2)  # all ID's unique (e.g., subid=k only for one subject within one HH)
BGid
hhid=rep(rep(1:Nhh, times=hh.size), times=2)
subid=rep(1:N, times=2)
N*2
table(BGid)
table(subid)
v.num=rep(c(1,2),each=N)
v.num
age = 2
sum(age>=18 & age<=74)
age[age<18|age>74
]
age=rep(0,N)            #create age vector with all 0's (so all values will be replaced in first iteration of while loop)
age
sum(age>=18 & age<=74)
rnorm(length(age[age<18|age>74]),40,15)
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)
sum(age>=18 & age<=74)
N
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)
sum(age>=18 & age<=74)
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)
sum(age>=18 & age<=74)
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)
sum(age>=18 & age<=74)
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)
sum(age>=18 & age<=74)
N
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)
sum(age>=18 & age<=74)
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)
sum(age>=18 & age<=74)
age.strat.unq=age.strat[v.num==1]
age.inrange=FALSE
age=rep(0,N)            #create age vector with all 0's (so all values will be replaced in first iteration of while loop)
while(!age.inrange){
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)    #only generate new values for age to replace out of range values
#check for success
age.inrange=(sum(age>=18 & age<=74)==N)   #age.inrange=TRUE if all N subjects have 18<=age<=74 (which would break the loop)
}
age.base=rep(age,times=2)   #create baseline age (which is the same at V1 and V2)
age.strat=(age.base>=45)    #indicator for older (45-74 years) stratum
age.strat.unq=age.strat[v.num==1]
set.seed(123)
hisp.prop=rep(c(.2,.2125,.2975,.2975),times=2)  # proportion of HHs within each stratum with Hispanic surname & in target population
other.prop=rep(c(.15,.225,.26,.2925),times=2)   # proportion of HHs within each stratum with other surname & in target population
Nbg.strat=rep(c(58,21,130,167),times=2)         # number of BGs within each stratum
Nbg=sum(Nbg.strat)
bg.size.temp=1+round(rexp(Nbg,1/450))    # at least 1 HH per BG, mean number of HHs/BG=451 -- this is number of ALL HHs in each BG (including non-eligible HHs)
num.hisp.strat=round(c(bg.size.temp[1:Nbg.strat[1]]*hisp.prop[1],bg.size.temp[(Nbg.strat[1]+1):sum(Nbg.strat[1:2])]*hisp.prop[2],bg.size.temp[(sum(Nbg.strat[1:2])+1):sum(Nbg.strat[1:3])]*hisp.prop[3],bg.size.temp[(sum(Nbg.strat[1:3])+1):sum(Nbg.strat[1:4])]*hisp.prop[4],
bg.size.temp[(sum(Nbg.strat[1:4])+1):sum(Nbg.strat[1:5])]*hisp.prop[5],bg.size.temp[(sum(Nbg.strat[1:5])+1):sum(Nbg.strat[1:6])]*hisp.prop[6],bg.size.temp[(sum(Nbg.strat[1:6])+1):sum(Nbg.strat[1:7])]*hisp.prop[7],bg.size.temp[(sum(Nbg.strat[1:7])+1):sum(Nbg.strat[1:8])]*hisp.prop[8])) # number of eligible HHs with Hispanic surname in each BG
num.other.strat=round(c(bg.size.temp[1:Nbg.strat[1]]*other.prop[1],bg.size.temp[(Nbg.strat[1]+1):sum(Nbg.strat[1:2])]*other.prop[2],bg.size.temp[(sum(Nbg.strat[1:2])+1):sum(Nbg.strat[1:3])]*other.prop[3],bg.size.temp[(sum(Nbg.strat[1:3])+1):sum(Nbg.strat[1:4])]*other.prop[4],
bg.size.temp[(sum(Nbg.strat[1:4])+1):sum(Nbg.strat[1:5])]*other.prop[5],bg.size.temp[(sum(Nbg.strat[1:5])+1):sum(Nbg.strat[1:6])]*other.prop[6],bg.size.temp[(sum(Nbg.strat[1:6])+1):sum(Nbg.strat[1:7])]*other.prop[7],bg.size.temp[(sum(Nbg.strat[1:7])+1):sum(Nbg.strat[1:8])]*other.prop[8])) # number of eligible HHs with other surname in each BG
bg.size=num.hisp.strat+num.other.strat  # number of eligible HHs in each BG
Nhh=sum(bg.size)                        # number of HHs in target population
hh.size=1+rpois(Nhh,1)                  # at least 1 subject per HH, mean number of subjects/HH=2
N=sum(hh.size)                          # number of subjects in target population
A=matrix(rep(NA,times=max(bg.size)*length(bg.size)),nrow=max(bg.size),ncol=length(bg.size))
for (i in 1:length(bg.size)){
A[,i]=c(rep(TRUE,times=num.hisp.strat[i]),rep(FALSE,times=num.other.strat[i]),rep(NA,times=max(bg.size)-bg.size[i]))    # create matrix A with each column corresponding to a BG (containing 1's for each Hispanic HH followed by 0's for each other HH)
}
hisp.strat.hh=na.omit(c(A))   #indicator for Hispanic surname (one entry per HH)
BGid=rep(rep(rep(1:Nbg, times=bg.size), times=hh.size), times=2)  # all ID's unique (e.g., subid=k only for one subject within one HH)
hhid=rep(rep(1:Nhh, times=hh.size), times=2)
subid=rep(1:N, times=2)
v.num=rep(c(1,2),each=N)
strat=1+(BGid>Nbg.strat[1])+(BGid>sum(Nbg.strat[1:2]))+(BGid>sum(Nbg.strat[1:3]))+(BGid>sum(Nbg.strat[1:4]))+(BGid>sum(Nbg.strat[1:5]))+(BGid>sum(Nbg.strat[1:6]))+(BGid>sum(Nbg.strat[1:7]))
hisp.strat=hisp.strat.hh[hhid]
age.inrange=FALSE
age=rep(0,N)            #create age vector with all 0's (so all values will be replaced in first iteration of while loop)
while(!age.inrange){
age[age<18|age>74]=rnorm(length(age[age<18|age>74]),40,15)    #only generate new values for age to replace out of range values
#check for success
age.inrange=(sum(age>=18 & age<=74)==N)   #age.inrange=TRUE if all N subjects have 18<=age<=74 (which would break the loop)
}
age.base=rep(age,times=2)   #create baseline age (which is the same at V1 and V2)
age.strat=(age.base>=45)    #indicator for older (45-74 years) stratum
hisp.strat
age.strat.unq=age.strat[v.num==1]
hisp.strat.unq=hisp.strat[v.num==1]
strat.unq=strat[v.num==1]
hisp.strat.unq
pop=data.frame(strat,BGid,hhid,subid,v.num,hisp.strat,age.base,age.strat,x,y.con.bmi.v4,y.con.gfr.v3,y.bin.gfr.low.v3,y.bin.gfr.med.v3,y.bin.gfr.hi.v3,y.con.gfr.v4,y.bin.gfr.low.v4,y.bin.gfr.med.v4,y.bin.gfr.hi.v4,y.bin.gfr.hi.v5,y.bin.gfr.hi.v6,y.bin.gfr.hi.v7)
library(tidyverse)
results_df = read_csv('../data/iterate_results.csv')
library(tidyverse)
library(tidyverse)
library(exactRankTests)
library(BSDA)
chol <- read_delim("HW3_CHOL.txt", " ", col_names=FALSE)
library(exactRankTests)
library(BSDA)
chol <- read_delim("HW3_CHOL.txt", " ", col_names=FALSE)
colnames(chol) <- c("gender", "age", "cholesterol", "event")
chol[, c(2,3,4)] <- sapply(chol[, c(2,3,4)], as.numeric)
t.test(chol$cholesterol[chol$event == 0], chol$cholesterol[chol$event == 1], alternative = "two.sided", var.equal = TRUE)$statistic
var.test(chol$cholesterol[chol$event == 0], chol$cholesterol[chol$event == 1])$statistic
wilcox.exact(mNoCHD, mCHD, alternative="two.sided")$statistic
mNoCHD <- chol$cholesterol[chol$gender=='M' & chol$event==0]
mCHD <- chol$cholesterol[chol$gender=='M' & chol$event==1]
wilcox.exact(mNoCHD, mCHD, alternative="two.sided")$statistic
ks.test(mNoCHD, mCHD)$statistic
t.test(df$preop, df$postop, paired=TRUE, conf.level = .95)$statistic
patient <- c(1:6)
preop <- c(110,101,61,73,143,118)
postop <- c(149,105,162,93,143,100)
df <- data.frame(patient, preop, postop)
t.test(df$preop, df$postop, paired=TRUE, conf.level = .95)$statistic
diff <- df$preop - df$postop
SIGN.test(diff)$statistic
t.test(y)
y <- chol$cholesterol[chol$gender == 'M' & chol$event == 1]
library(tidyverse)
library(tidyverse)
library(exactRankTests)
library(BSDA)
chol <- read_delim("HW3_CHOL.txt", " ", col_names=FALSE)
colnames(chol) <- c("gender", "age", "cholesterol", "event")
chol[, c(2,3,4)] <- sapply(chol[, c(2,3,4)], as.numeric)
t.test(chol$cholesterol[chol$event == 0], chol$cholesterol[chol$event == 1], alternative = "two.sided", var.equal = TRUE)$statistic
t.test(chol$cholesterol[chol$event == 0], chol$cholesterol[chol$event == 1], alternative = "two.sided", var.equal = TRUE)$p.value
y <- chol$cholesterol[chol$gender == 'M' & chol$event == 1]
t.test(y)
#set.seed(20)
cover_tmp <- 0
n <- 500
y <- chol$cholesterol[chol$gender == 'M' & chol$event == 1]
t.test(y)
mean.y <- mean(y)
var.y <- var(y)
# bootstrap-t interval
boots <- 500
zs <- matrix(0,1,boots)
for (jj in 1:boots){
ysamp <- sample(y,size=n,replace=T)
zs[jj] <- (mean(ysamp)-mean.y)/sqrt(var(ysamp)/n)
}
lower.t <- quantile(zs,0.975)
upper.t <- quantile(zs,0.025)
lower.y <- mean.y - lower.t*sqrt(var.y/n)
upper.y <- mean.y - upper.t*sqrt(var.y/n)
lower.y
upper.y
#set.seed(20)
n <- 500
y <- chol$cholesterol[chol$gender == 'M' & chol$event == 1]
t.test(y)
mean.y <- mean(y)
var.y <- var(y)
# bootstrap-t interval
boots <- 500
zs <- matrix(0,1,boots)
for (jj in 1:boots){
ysamp <- sample(y,size=n,replace=T)
zs[jj] <- (mean(ysamp)-mean.y)/sqrt(var(ysamp)/n)
}
lower.t <- quantile(zs,0.975)
upper.t <- quantile(zs,0.025)
lower.y <- mean.y - lower.t*sqrt(var.y/n)
upper.y <- mean.y - upper.t*sqrt(var.y/n)
lower.y
upper.y
women_CHD <- chol$cholesterol[chol$gender=='F' & chol$event == 1]
median <- quantile(women_CHD, 0.5)
median
n <- length(women_CHD)
print(pbinom(2, n, 0.5))
print(pbinom(3, n, 0.5))
#Therefore
r <- 3
#check that this creates at least 95% confidence
sum(dbinom(r:(n-r), n, 0.5))
y <- sort(women_CHD)
lower <- nth(y, r)
upper <- nth(y, n-r+1)
lower
upper
mNoCHD <- chol$cholesterol[chol$gender=='M' & chol$event==0]
mCHD <- chol$cholesterol[chol$gender=='M' & chol$event==1]
wilcox.exact(mNoCHD, mCHD, alternative="two.sided")$statistic
wilcox.exact(mNoCHD, mCHD, alternative="two.sided")$p.value
wilcox.exact(mNoCHD, mCHD, alternative="two.sided")
mNoCHD <- chol$cholesterol[chol$gender=='M' & chol$event==0]
mCHD <- chol$cholesterol[chol$gender=='M' & chol$event==1]
wilcox.test(mNoCHD, mCHD, alternative="two.sided")$statistic
wilcox.test(mNoCHD, mCHD, alternative="two.sided")
wilcox.test(mNoCHD, mCHD, alternative="two.sided")$statistic
wilcox.test(mNoCHD, mCHD, alternative="two.sided")$p.value
df <- read_tsv("UMD_Services_Provided_20190719.tsv") %>% select(c(1,2,3,6,7,8, 11))
setwd("~/GitHub/bios611-projects-fall-2019-ayoung31/project_1/scripts")
library(ggplot2)
library(tidyverse)
df <- read_tsv("C:\Users\amyou\Documents\GitHub\bios611-projects-fall-2019-ayoung31\project_1\data\UrbanMinistriesData.tsv") %>% select(c(1,2,3,6,7,8, 11))
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>% select(c(1,2,3,6,7,8, 11))
colnames(df) <- c('date', 'ID', 'ID_Merge', 'FoodProvidedFor', 'foodPounds', 'clothing', 'hyKits')
colnames(df) <- c('date', 'ID', 'ID_Merge', 'FoodProvidedFor', 'foodPounds', 'clothing', 'hyKits')
df$date2 <- as.Date(df$date, "%m/%d/%Y") #put character date in date format
df$week <- format(df$date2, "%W") #extract week from the date
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,2,3,6,7,8,11)) #only include variables of interest
colnames(df) <- c('date', 'ID', 'ID_Merge', 'FoodProvidedFor', 'foodPounds', 'clothing', 'hyKits')
df$date2 <- as.Date(df$date, "%m/%d/%Y") %>% filter(year > 1983 & year < 2020)#put character date in date format and remove invalid years
library(ggplot2)
library(tidyverse)
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,2,3,6,7,8,11)) #only include variables of interest
colnames(df) <- c('date', 'ID', 'ID_Merge', 'FoodProvidedFor', 'foodPounds', 'clothing', 'hyKits')
df$date2 <- as.Date(df$date, "%m/%d/%Y") #put character date in date format
df$year <- as.Date(df$date2, "%Y") %>% filter(year > 1983 & year < 2020) #extract year from date and remove invalid years
library(tidyverse)
df$date2 <- as.Date(df$date, "%m/%d/%Y") #put character date in date format
df$year <- as.Date(df$date2, "%Y") %>% filter(year > 1983 & year < 2020) #extract year from date and remove invalid years
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,2,3,6,7,8,11)) #only include variables of interest
colnames(df) <- c('date', 'ID', 'ID_Merge', 'FoodProvidedFor', 'foodPounds', 'clothing', 'hyKits')
df$date2 <- as.Date(df$date, "%m/%d/%Y") #put character date in date format
df$year <- as.Date(df$date2, "%Y") #extract year from date
df <- df %>% filter(year > 1983 & year < 2020) #remove invalid years
df$week <- format(df$date2, "%W") #extract week from the date
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,2,3,6,7,8,11)) #only include variables of interest
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,2,3,6,7,8)) #only include variables of interest
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('date', 'ID', 'ID_Merge', 'FoodProvidedFor', 'foodPounds', 'clothing', 'hyKits')
colnames(df) <- c('date', 'FoodProvidedFor', 'foodPounds', 'clothing')
df$date2 <- as.Date(df$date, "%m/%d/%Y") #put character date in date format
df$year <- as.Date(df$date2, "%Y") #extract year from date
df$year <- format(df$date2, "%Y") #extract year from date
df <- df %>% filter(year > 1983 & year < 2020) #remove invalid years
df$week <- format(df$date2, "%W") #extract week from the date
df <- df %>% filter(year > 1983 & year < 2020) %>%arrange(year) #remove invalid years
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('date', 'FoodProvidedFor', 'foodPounds', 'clothing')
df$date2 <- as.Date(df$date, "%m/%d/%Y") #put character date in date format
df$year <- format(df$date2, "%Y") #extract year from date
df <- df %>% filter(year > 1983 & year < 2020) %>% arrange(year) #remove invalid years
df$week <- format(df$date2, "%W") #extract week from the date
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
df$date2 <- as.Date(df$dateChar, "%m/%d/%Y") #put character date in date format
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
df$date <- as.Date(df$dateChar, "%m/%d/%Y") #put character date in date format
df$year <- format(df$date, "%Y") #extract year from date
df <- df %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=format(df$date, "%W")) %>% #remove invalid years
select(-date2) %>%
filter(foodPounds < 450121) #remove outlier
df <- df %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=format(date, "%W")) %>% #remove invalid years
select(-date2) %>%
filter(foodPounds < 450121) #remove outlier
df <- df %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=format(date, "%W")) %>% #remove invalid years
select(-dateChar) %>%
filter(foodPounds < 450121) #remove outlier
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
dfclean <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y"), year=format(date, "%Y")) %>%
select(-dateChar) %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=format(date, "%W")) %>% #remove invalid years
filter(foodPounds < 450121) #remove outlier
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y"), year=format(date, "%Y")) %>%
select(-dateChar) %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=format(date, "%W")) %>% #remove invalid years
filter(foodPounds < 450121) #remove outlier
?format
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y"), year=format(date, "%Y")) %>%
select(-dateChar) %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=format(date, "%w")) %>% #remove invalid years
filter(foodPounds < 450121) #remove outlier
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y"), year=format(date, "%Y")) %>%
select(-dateChar) %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=cut(date, breaks = "month")) %>% #remove invalid years
filter(foodPounds < 450121) #remove outlier
table(df$week)
length(table(df$week))
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y"), year=format(date, "%Y")) %>%
select(-dateChar) %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=cut(date, breaks = "month")) %>% #remove invalid years
filter(foodPounds < 450121) #remove outlier
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y"), year=format(date, "%Y")) %>%
select(-dateChar) %>%
filter(year > 1983 & year < 2020) %>%
arrange(date) %>%
mutate(week=cut(date, breaks = "week")) %>% #remove invalid years
filter(foodPounds < 450121) #remove outlier
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
# data cleaning and variable creation
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y")) %>% #Properly format date variable
mutate(year=format(date, "%Y")) %>% #extract year from date
select(-dateChar) %>% #drop the character format date
filter(year > 1983 & year < 2020) %>% #remove invalid years
mutate(week=cut(date, breaks = "week")) %>% #create week variable
filter(foodPounds < 450121) %>% #remove outlier from pounds of food
mutate(bigFam = FoodProvidedFor > 4) %>% #create indicator for large families
mutate(weekday = weekdays(date)) %>% #create day of week variable (mon-sun)
mutate(weekdayNum = as.numeric(format(dailyVals$date, "%u"))) #create numeric day of week (1-7, mon=1)
# data cleaning and variable creation
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y")) %>% #Properly format date variable
mutate(year=format(date, "%Y")) %>% #extract year from date
select(-dateChar) %>% #drop the character format date
filter(year > 1983 & year < 2020) %>% #remove invalid years
mutate(week=cut(date, breaks = "week")) %>% #create week variable
filter(foodPounds < 450121) %>% #remove outlier from pounds of food
mutate(bigFam = FoodProvidedFor > 4) %>% #create indicator for large families
mutate(weekday = weekdays(date)) %>% #create day of week variable (mon-sun)
mutate(weekdayNum = as.numeric(format(date, "%u"))) #create numeric day of week (1-7, mon=1)
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
# data cleaning and variable creation
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y")) %>% #Properly format date variable
select(-dateChar) %>% #drop the character format date
mutate(year=format(date, "%Y")) %>% #extract year from date
filter(year > 1983 & year < 2020) %>% #remove invalid years
mutate(week=cut(date, breaks = "week")) %>% #create week variable
filter(foodPounds < 450121) %>% #remove outlier from pounds of food
mutate(bigFam = FoodProvidedFor > 4) %>% #create indicator for large families
mutate(weekday = weekdays(date)) %>% #create day of week variable (mon-sun)
mutate(weekdayNum = as.numeric(format(date, "%u"))) #create numeric day of week (1-7, mon=1)
weeklyVals <- df %>%
dailyVals <- df %>%
group_by(date) %>%
summarize(numBig=sum(bigFam, na.rm=TRUE)) %>%
summarize(totPounds=sum(foodPounds, na.rm=TRUE)) %>%
summarize(totclothes=sum(clothing, na.rm=TRUE))
dailyVals <- df %>%
group_by(date) %>%
summarize(numBig=sum(bigFam, na.rm=TRUE)) %>%
summarize(totPounds=sum(foodPounds, na.rm=TRUE)) %>%
summarize(totclothes=sum(clothing, na.rm=TRUE))
View(df)
dailyVals <- df %>%
group_by(date) %>%
summarize(numBig=sum(bigFam, na.rm=TRUE)) %>%
#summarize(totPounds=sum(foodPounds, na.rm=TRUE)) %>%
summarize(totclothes=sum(clothing, na.rm=TRUE))
df <- read_tsv("C:/Users/amyou/Documents/GitHub/bios611-projects-fall-2019-ayoung31/project_1/data/UrbanMinistriesData.tsv") %>%
select(c(1,6,7,8)) #only include variables of interest
colnames(df) <- c('dateChar', 'FoodProvidedFor', 'foodPounds', 'clothing')
# data cleaning and variable creation
df <- df %>%
mutate(date = as.Date(dateChar, "%m/%d/%Y")) %>% #Properly format date variable
select(-dateChar) %>% #drop the character format date
mutate(year=format(date, "%Y")) %>% #extract year from date
filter(year > 1983 & year < 2020) %>% #remove invalid years
mutate(week=cut(date, breaks = "week")) %>% #create week variable
filter(foodPounds < 450121) %>% #remove outlier from pounds of food
mutate(bigFam = FoodProvidedFor > 4) %>% #create indicator for large families
mutate(weekday = weekdays(date)) %>% #create day of week variable (mon-sun)
mutate(weekdayNum = as.numeric(format(date, "%u"))) #create numeric day of week (1-7, mon=1)
dailyVals <- df %>%
group_by(date) %>%
summarize(numBig=sum(bigFam, na.rm=TRUE)) %>%
summarize(totPounds=sum(foodPounds, na.rm=TRUE)) %>%
summarize(totclothes=sum(clothing, na.rm=TRUE))
